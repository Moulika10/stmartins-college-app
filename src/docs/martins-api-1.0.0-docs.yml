openapi: 3.0.0
servers:
  - description: Localhost Mocking
    url: http://localhost:3030/api/v1
info:
  description: This is a simple API
  version: "1.0.0"
  title: St Martins College API
  contact:
    email: moulikareddy93@gmail.com
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers
paths:
  /users:
    get:
      tags:
        - developers
      summary: searches users
      operationId: getUsers
      description: |
        By passing in the appropriate options, you can search for
        available users in the system
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
  /users/{id}:
    get:
      tags:
        - developers
      summary: get a user by id
      operationId: getUser
      description: |
        By passing a valid uuid, you can search for
        a specific user in the system
      parameters:
        - in: path
          name: id
          description: pass an uuid corresponding for a specific user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorModel"
        "422":
          description: bad input parameter
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: string
          format: uuid
          example: "47936bd0-540c-4425-a9e4-05f96362478d"
        email:
          type: string
          example: "test1@dtn.com"
        createdAt:
          type: string
          format: date-time
          example: "2021-12-01T17:53:30.675Z"
        updatedAt:
          type: string
          format: date-time
          example: "2021-12-01T17:53:30.675Z"
    ErrorModel:
      type: object
      required:
        - type
        - title
        - status
      properties:
        type:
          type: string
          example: "https://example-api.com/problem/not-found"
        title:
          type: string
          example: "Object not found"
        status:
          type: number
          example: 404
        message:
          type: string
          example: "Item bc1e4cd1-14be-4f34-a738-3bfa05ce8ac1 Not Found "
    ValidationError:
      allOf:
        - $ref: "#/components/schemas/ErrorModel"
      type: object
      required:
        - invalid_params
      properties:
        type:
          example: "https://example-api.com/problem/invalid-object"
        title:
          example: "Invalid object in request body"
        status:
          example: 422
        message:
          example: bad input parameter
        invalid_params:
          $ref: "#/components/schemas/InvalidParams"
    InvalidParams:
      type: object
      required:
        - params
      properties:
        params:
          type: array
          items:
            $ref: "#/components/schemas/ErrorObject"
    ErrorObject:
      type: object
      required:
        - keyword
        - dataPath
        - schemaPath
        - params
      properties:
        keyword:
          type: string
          example: maxLength
        dataPath:
          type: string
          example: .id
        schemaPath:
          type: string
          example: "#/properties/id/maxLength"
        params:
          type: object
        propertyName:
          type: string
        message:
          type: string
        schema:
          type: object
        parentSchema:
          type: object
        data:
          type: object
